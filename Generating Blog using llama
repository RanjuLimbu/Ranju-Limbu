import streamlit as st
from langchain.prompts import PromptTemplate
from langchain.llms import CTransformers
from huggingface_hub import login
from torch import Tensor

## Login using Hugging Face Token
# Ensure your token is stored and accessible.
token = "Enter Your Token"  # Replace with your Hugging Face API token
login(token)

## Function To get response from LLaMA 3 model
def getLLamaresponse(input_text, no_words, blog_style):
    ### Llama 2 model via Hugging Face Hub using transformers
    from transformers import AutoModelForCausalLM, AutoTokenizer

    model_name = "meta-llama-3"  # Replace with your desired model path
    model = AutoModelForCausalLM.from_pretrained(model_name)
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    
    # Encode input text
    inputs = tokenizer(input_text, return_tensors="pt")
    
    # Generate output
    outputs = model.generate(inputs["input_ids"], max_length=int(no_words), temperature=0.01)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    
    print(response)
    return response


st.set_page_config(page_title="Generate Blogs", page_icon='ðŸ¤–', layout='centered', initial_sidebar_state='collapsed')

st.header("Generate Blogs ðŸ¤–")

input_text = st.text_input("Enter the Blog Topic")

## creating two more columns for additional 2 fields
col1, col2 = st.columns([5, 5])

with col1:
    no_words = st.text_input('No of Words')
with col2:
    blog_style = st.selectbox('Writing the blog for', ('Researchers', 'Data Scientist', 'Common People'), index=0)

submit = st.button("Generate")

## Final response
if submit:
    st.write(getLLamaresponse(input_text, no_words, blog_style))
